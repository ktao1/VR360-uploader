<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Preview</title>
  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css" />
  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css" />
  <style>
    body {
      padding-top: 80px;
      word-wrap: break-word;
    }
  </style>
</head>

<body>

  <div class="container">
    <h1 class="text-danger text-center">
      <span class="fa fa-youtube"></span> Your VR 360 video has been uploaded
    </h1>

    <div class="row">
      <!-- GOOGLE INFORMATION -->
      <div class="well text-center">
        <div id="player"></div>
      </div>
    </div>

    <div class="row">
      <form>
        <div class="form-group">
          <label for="exampleFormControlFile1">Your subtitle</label>
          <input type="file" class="form-control-file" id="exampleFormControlFile1">
          <div class="form-group">
            <button class="btn btn-block btn-danger">
              Upload Subtitle
            </button>
          </div>
      </form>
    </div>
  </div>

  <script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    var videoId = '<%-videoID%>';

    var chunk = '<%-chunk%>';

    console.log(chunk);
      
    console.log(videoId);
    function onYouTubeIframeAPIReady() {
      player = new YT.Player('player', {
        height: '390',
        width: '640',
        videoId: 'Z19NAX_gWxI',
        playerVars: {

        },
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });
    }

    // 4. The API will call this function when the video player is   ready.
    function onPlayerReady(event) {
      event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
    }
    function stopVideo() {
      player.stopVideo();
    }
  </script>
</body>

</html>