<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Preview</title>
  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css" />
  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css" />
  <style>
    html,
    body {
      height: 100%;
    }
    body {
      display: -ms-flexbox;
      display: -webkit-box;
      display: flex;
      -ms-flex-align: center;
      -ms-flex-pack: center;
      -webkit-box-align: center;
      -webkit-box-pack: center;
      justify-content: center;
      padding-top: 40px;
      padding-bottom: 40px;
      background-color: #f5f5f5;
    }
    
    .container {
      margin-top: 5%;
    }

    .title{
      margin-bottom: 50px;
    }

  </style>
</head>

<body>

  <div class="container">
    <h1 class="text-danger text-center title">
      <span class="fa fa-youtube"></span> Your VR 360 video uploaded
    </h1>

    <div class="row">
      <!-- GOOGLE INFORMATION -->
      <div class="col-sm-7">
        <div id="player">
        </div>
      </div>

      <div class="col-sm-5">
        <div id="chapter" class="list-group">
        </div>
      </div>

    </div>

    <div class="row">
      <form>
        <div class="form-group">
          <label for="exampleFormControlFile1">Your subtitle</label>
          <input type="file" class="form-control-file" id="exampleFormControlFile1">
          <div class="form-group">
            <button class="btn btn-block btn-danger">
              Upload Subtitle
            </button>
          </div>
      </form>
    </div>
  </div>

  <script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    var videoId = '<%-videoID%>';
    var chunk = "<%=chunk%>";
    console.log(chunk);
    console.log(videoId);



    function onYouTubeIframeAPIReady() {
      player = new YT.Player('player', {
        height: '390',
        width: '640',
        videoId: videoId,
        playerVars: {

        },
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });
    }



    // 4. The API will call this function when the video player is   ready.
    function onPlayerReady(event) {
      event.target.playVideo();

      var chapterList = chunk.split(";");

      for (let i = 0; i < chapterList.length; i++) {
        var button = document.createElement("button");
        button.setAttribute("type", "button");
        button.setAttribute("class", "list-group-item btn-block");

        var time = chapterList[i].split(' ')[0];
        var count = time.split(':').length - 1;
        if (count > 0 && count <= 2) {
          button.innerHTML = chapterList[i];

          button.addEventListener("click", function () {
            var second = 0;
            count = chapterList[i].split(' ')[0].split(':').length - 1;
            console.log(count);
            if (count == 1) {
              second = parseInt(chapterList[i].split(' ')[0].split(':')[0] * 60) + parseInt(chapterList[i].split(' ')[0].split(':')[1]);
            }
            else if (count == 2) {
              second = parseInt(chapterList[i].split(' ')[0].split(':')[0] * 60 * 60) + parseInt(chapterList[i].split(' ')[0].split(':')[1] * 60) + parseInt(chapterList[i].split(' ')[0].split(':')[2]);
            }
            console.log(second);
            player.seekTo(second);
          });
          var buttonDiv = document.getElementById("chapter");
          buttonDiv.appendChild(button);
        }
      }

      // player.seekTo("100000");
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
    }
    function stopVideo() {
      player.stopVideo();
    }
  </script>
</body>

</html>